/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * @Generated by gentest/gentest.sh with the following input
 *
<div id="nested_overflowing_child" style="height: 100px; width: 100px;">
  <div>
    <div style="height: 200px; width: 200px;"></div>
  </div>
</div>

<div id="nested_overflowing_child_in_constraint_parent" style="height: 100px; width: 100px;">
  <div style="height: 100px; width: 100px;">
    <div style="height: 200px; width: 200px;"></div>
  </div>
</div>
 *
 */

#include <CSSLayout/CSSLayout.h>
#include <gtest/gtest.h>

TEST(CSSLayoutTest, nested_overflowing_child) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetWidth(root, 100);
  CSSNodeStyleSetHeight(root, 100);

  const CSSNodeRef root_child0 = CSSNodeNew();
  CSSNodeInsertChild(root, root_child0, 0);

  const CSSNodeRef root_child0_child0 = CSSNodeNew();
  CSSNodeStyleSetWidth(root_child0_child0, 200);
  CSSNodeStyleSetHeight(root_child0_child0, 200);
  CSSNodeInsertChild(root_child0, root_child0_child0, 0);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetHeight(root_child0));

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root_child0_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetWidth(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetHeight(root_child0_child0));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetHeight(root_child0));

  ASSERT_EQ(-100, CSSNodeLayoutGetLeft(root_child0_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetWidth(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetHeight(root_child0_child0));

  CSSNodeFreeRecursive(root);
}

TEST(CSSLayoutTest, nested_overflowing_child_in_constraint_parent) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetWidth(root, 100);
  CSSNodeStyleSetHeight(root, 100);

  const CSSNodeRef root_child0 = CSSNodeNew();
  CSSNodeStyleSetWidth(root_child0, 100);
  CSSNodeStyleSetHeight(root_child0, 100);
  CSSNodeInsertChild(root, root_child0, 0);

  const CSSNodeRef root_child0_child0 = CSSNodeNew();
  CSSNodeStyleSetWidth(root_child0_child0, 200);
  CSSNodeStyleSetHeight(root_child0_child0, 200);
  CSSNodeInsertChild(root_child0, root_child0_child0, 0);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root_child0));

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root_child0_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetWidth(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetHeight(root_child0_child0));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root_child0));

  ASSERT_EQ(-100, CSSNodeLayoutGetLeft(root_child0_child0));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetWidth(root_child0_child0));
  ASSERT_EQ(200, CSSNodeLayoutGetHeight(root_child0_child0));

  CSSNodeFreeRecursive(root);
}
